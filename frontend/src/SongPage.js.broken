import React, { useState, useEffect } from "react";
import SongRow from "./components/SongRow";
import SongFilters from "./components/SongFilters";
import PackHeader from "./components/PackHeader";
import AlbumSeriesModal from "./components/AlbumSeriesModal";
import API_BASE_URL from "./config";

function SongPage({ status }) {
  // State management
  const [songs, setSongs] = useState([]);
  const [search, setSearch] = useState("");
  const [editing, setEditing] = useState({});
  const [editValues, setEditValues] = useState({});
  const [spotifyOptions, setSpotifyOptions] = useState({});
  const [loadingId, setLoadingId] = useState(null);
  const [selectedSongs, setSelectedSongs] = useState([]);
  const [sortKey, setSortKey] = useState(null);
  const [sortDirection, setSortDirection] = useState("asc");
  const [collapsedGroups, setCollapsedGroups] = useState({});
  const [groupBy, setGroupBy] = useState("artist");
  const [showBulkModal, setShowBulkModal] = useState(false);
  const [showAlbumSeriesModal, setShowAlbumSeriesModal] = useState(false);
  const [albumSeriesForm, setAlbumSeriesForm] = useState({
    artist_name: "",
    album_name: "",
    year: "",
    cover_image_url: "",
    description: "",
  });
  const [bulkEditFields, setBulkEditFields] = useState({
    artist: "",
    album: "",
    pack: "",
    year: "",
    status: "",
    collaborations: "",
  });

  // Fetch songs on component mount and when status changes
  useEffect(() => {
    let url = `${API_BASE_URL}/songs?`;
    if (status) url += `status=${encodeURIComponent(status)}&`;
    if (search) url += `query=${encodeURIComponent(search)}&`;

    fetch(url)
      .then((res) => res.json())
      .then((data) => setSongs(data))
      .catch((error) => console.error("Error fetching songs:", error));
  }, [status, search]);

  // Sorting logic
  const handleSort = (key) => {
    if (sortKey === key) {
      setSortDirection((prev) => (prev === "asc" ? "desc" : "asc"));
    } else {
      setSortKey(key);
      setSortDirection("asc");
    }
  };

  // Group by artist helper
  const groupByArtist = (songs) => {
    const grouped = songs.reduce((acc, song) => {
      if (!song || typeof song !== "object") return acc;
      const artist = song.artist || "Unknown Artist";
      const album = song.album || "Unknown Album";
      if (!acc[artist]) acc[artist] = {};
      if (!acc[artist][album]) acc[artist][album] = [];
      acc[artist][album].push(song);
      return acc;
    }, {});

    return Object.fromEntries(
      Object.entries(grouped)
        .sort(([a], [b]) => a.localeCompare(b))
        .map(([artist, albums]) => [
          artist,
          Object.fromEntries(
            Object.entries(albums).sort(([a], [b]) => a.localeCompare(b))
          ),
        ])
    );
  };

  // Group by pack helper
  const groupByPack = (songs) => {
    const grouped = songs.reduce((acc, song) => {
      if (!song || typeof song !== "object") return acc;
      const pack = song.pack || "N/A";
      if (!acc[pack]) acc[pack] = [];
      acc[pack].push(song);
      return acc;
    }, {});

    return Object.fromEntries(
      Object.entries(grouped).sort(([a], [b]) => a.localeCompare(b))
    );
  };

  const sortedSongs = [...songs].sort((a, b) => {
    if (!sortKey) return 0;
    const aVal = a[sortKey];
    const bVal = b[sortKey];
    let comparison = 0;
    if (typeof aVal === "number" && typeof bVal === "number") {
      comparison = aVal - bVal;
    } else {
      comparison = (aVal || "")
        .toString()
        .localeCompare((bVal || "").toString());
    }
    return sortDirection === "asc" ? comparison : -comparison;
  });

  // Grouping logic
  const groupedSongs =
    groupBy === "artist"
      ? groupByArtist(sortedSongs)
      : groupByPack(sortedSongs);

  // Event handlers
  const toggleGroup = (key) => {
    setCollapsedGroups((prev) => ({ ...prev, [key]: !prev[key] }));
  };

  const toggleAllGroups = () => {
    const allCollapsed = Object.values(collapsedGroups).every(Boolean);
    const newCollapsed = {};
    Object.keys(groupedSongs).forEach((key) => {
      newCollapsed[key] = !allCollapsed;
    });
    setCollapsedGroups(newCollapsed);
  };

  const onStatusChange = (newStatus) => {
    const url = new URL(window.location);
    if (newStatus) {
      url.searchParams.set("status", newStatus);
    } else {
      url.searchParams.delete("status");
    }
    window.history.pushState({}, "", url);
    window.location.reload();
  };

  // Bulk operations
  const handleBulkEdit = () => setShowBulkModal(true);
  const handleBulkDelete = () => {
    if (window.confirm(`Delete ${selectedSongs.length} songs?`)) {
      Promise.all(
        selectedSongs.map((id) =>
          fetch(`${API_BASE_URL}/songs/${id}`, { method: "DELETE" })
        )
      ).then(() => {
        setSongs(songs.filter((s) => !selectedSongs.includes(s.id)));
        setSelectedSongs([]);
        window.showNotification("Songs deleted successfully", "success");
      });
    }
  };

  const handleBulkEnhance = async () => {
    // Implementation for bulk enhance
    console.log("Bulk enhance", selectedSongs);
  };

  const handleStartWork = async () => {
    // Implementation for start work
    console.log("Start work", selectedSongs);
  };

  const handleCleanTitles = () => {
    // Implementation for clean titles
    console.log("Clean titles", selectedSongs);
  };

  // Album series operations
  const handleCreateAlbumSeries = async () => {
    if (!albumSeriesForm.artist_name || !albumSeriesForm.album_name) {
      window.showNotification(
        "Please provide artist name and album name.",
        "warning"
      );
      return;
    }

    const firstSong = songs.find((song) => song.id === selectedSongs[0]);
    if (!firstSong || !firstSong.pack) {
      window.showNotification(
        "Selected songs must be from the same pack.",
        "warning"
      );
      return;
    }

    try {
      const response = await fetch(
        `${API_BASE_URL}/album-series/create-from-pack`,
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            pack_name: firstSong.pack,
            artist_name: albumSeriesForm.artist_name,
            album_name: albumSeriesForm.album_name,
            year:
              albumSeriesForm.year && albumSeriesForm.year.trim()
                ? parseInt(albumSeriesForm.year)
                : null,
            cover_image_url:
              albumSeriesForm.cover_image_url &&
              albumSeriesForm.cover_image_url.trim()
                ? albumSeriesForm.cover_image_url
                : null,
            description:
              albumSeriesForm.description && albumSeriesForm.description.trim()
                ? albumSeriesForm.description
                : null,
          }),
        }
      );

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.detail || "Failed to create album series");
      }

      window.showNotification(
        `âœ… Album series "${albumSeriesForm.album_name}" created successfully!`,
        "success"
      );
      setAlbumSeriesForm({
        artist_name: "",
        album_name: "",
        year: "",
        cover_image_url: "",
        description: "",
      });
      setShowAlbumSeriesModal(false);
      setSelectedSongs([]);

      // Refresh songs
      let url = `${API_BASE_URL}/songs?`;
      if (status) url += `status=${encodeURIComponent(status)}&`;
      if (search) url += `query=${encodeURIComponent(search)}&`;
      fetch(url)
        .then((res) => res.json())
        .then((data) => setSongs(data));
    } catch (error) {
      console.error("Error creating album series:", error);
      window.showNotification("Failed to create album series.", "error");
    }
  };

  const handleMakeDoubleAlbumSeries = async (
    packName,
    albumsWithEnoughSongs
  ) => {
    // Implementation for double album series
    console.log("Make double album series", packName, albumsWithEnoughSongs);
  };

  // Other handlers
  const handleDelete = (id) => {
    if (window.confirm("Delete this song?")) {
      fetch(`${API_BASE_URL}/songs/${id}`, { method: "DELETE" }).then(() => {
        setSongs(songs.filter((s) => s.id !== id));
        window.showNotification("Song deleted successfully", "success");
      });
    }
  };

  const saveEdit = (id, field) => {
    const value = editValues[`${id}_${field}`];
    if (value !== undefined) {
      fetch(`${API_BASE_URL}/songs/${id}`, {
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ [field]: value }),
      }).then(() => {
        setSongs(
          songs.map((s) => (s.id === id ? { ...s, [field]: value } : s))
        );
        setEditing({ ...editing, [`${id}_${field}`]: false });
        setEditValues({ ...editValues, [`${id}_${field}`]: undefined });
      });
    }
  };

  const fetchSpotifyOptions = (song) => {
    // Implementation for Spotify options
    console.log("Fetch Spotify options", song);
  };

  const applySpotifyEnhancement = (songId, trackId) => {
    // Implementation for Spotify enhancement
    console.log("Apply Spotify enhancement", songId, trackId);
  };

  // Render helpers
  const renderArtistGroup = (artist, albums) => {
    return Object.entries(albums).map(([album, songs]) => {
      const groupKey = `${artist}-${album}`;
      return renderSongGroup(groupKey, songs, `${artist} - ${album}`);
    });
  };

  const renderPackGroup = (pack, songs) => {
    return renderSongGroup(pack, songs, pack);
  };

  const renderSongGroup = (groupKey, songs, displayName) => {
    // Filter out invalid songs
    const validSongsInPack = songs.filter(
      (song) => song && typeof song === "object"
    );

    if (validSongsInPack.length === 0) return null;

    // Calculate pack info
    const mostCommonArtist = Object.entries(
      validSongsInPack.reduce((acc, song) => {
        if (song.artist) acc[song.artist] = (acc[song.artist] || 0) + 1;
        return acc;
      }, {})
    ).sort((a, b) => b[1] - a[1])[0]?.[0];

    const artistImageUrl = validSongsInPack.find(
      (s) => s.artist === mostCommonArtist
    )?.artist_image_url;

    // Album series logic
    const uniqueSeries = Array.from(
      new Set(validSongsInPack.map((s) => s.album_series_id).filter(Boolean))
    );
    const seriesSongCounts = {};
    validSongsInPack.forEach((song) => {
      if (song.album_series_id) {
        seriesSongCounts[song.album_series_id] =
          (seriesSongCounts[song.album_series_id] || 0) + 1;
      }
    });
    const validSeries = uniqueSeries.filter(
      (seriesId) => seriesSongCounts[seriesId] >= 4
    );
    const seriesInfo = validSeries
      .map((id) => {
        const s = validSongsInPack.find((song) => song.album_series_id === id);
        return s
          ? { id, number: s.album_series_number, name: s.album_series_name }
          : null;
      })
      .filter(Boolean)
      .sort((a, b) => (a?.number ?? 0) - (b?.number ?? 0));

    // Double album series logic
    const albumCounts = {};
    validSongsInPack.forEach((song) => {
      if (song.album) {
        albumCounts[song.album] = (albumCounts[song.album] || 0) + 1;
      }
    });
    const albumsWithEnoughSongs = Object.entries(albumCounts)
      .filter(([album, count]) => count >= 5)
      .sort((a, b) => b[1] - a[1]);
    const hasExistingSeries = validSeries.length > 0;
    const hasSecondAlbum = albumsWithEnoughSongs.length >= 2;
    const canMakeDoubleAlbumSeries = hasExistingSeries && hasSecondAlbum;

    // Check if we can show album series button
    const albumCountsForButton = {};
    validSongsInPack.forEach((song) => {
      if (song.album) {
        albumCountsForButton[song.album] =
          (albumCountsForButton[song.album] || 0) + 1;
      }
    });
    const hasEnoughSongs = Object.values(albumCountsForButton).some(
      (count) => count >= 4
    );
    const showAlbumSeriesButton = validSeries.length === 0 && hasEnoughSongs;

    return (
      <React.Fragment key={groupKey}>
        <PackHeader
          packName={displayName}
          validSongsInPack={validSongsInPack}
          selectedSongs={selectedSongs}
          setSelectedSongs={setSelectedSongs}
          collapsedGroups={collapsedGroups}
          toggleGroup={toggleGroup}
          seriesInfo={seriesInfo}
          validSeries={validSeries}
          canMakeDoubleAlbumSeries={canMakeDoubleAlbumSeries}
          albumsWithEnoughSongs={albumsWithEnoughSongs}
          onMakeDoubleAlbumSeries={handleMakeDoubleAlbumSeries}
          onShowAlbumSeriesModal={() => setShowAlbumSeriesModal(true)}
          onBulkEdit={handleBulkEdit}
          onBulkDelete={handleBulkDelete}
          onBulkEnhance={handleBulkEnhance}
          onStartWork={handleStartWork}
          onCleanTitles={handleCleanTitles}
          artistImageUrl={artistImageUrl}
          mostCommonArtist={mostCommonArtist}
          showAlbumSeriesButton={showAlbumSeriesButton}
        />

        {!collapsedGroups[groupKey] &&
          validSongsInPack.map((song) => (
            <SongRow
              key={song.id}
              song={song}
              selected={selectedSongs.includes(song.id)}
              onSelect={(e) => {
                if (e.target.checked) {
                  setSelectedSongs([...selectedSongs, song.id]);
                } else {
                  setSelectedSongs(
                    selectedSongs.filter((id) => id !== song.id)
                  );
                }
              }}
              editing={editing}
              editValues={editValues}
              setEditing={setEditing}
              setEditValues={setEditValues}
              saveEdit={saveEdit}
              fetchSpotifyOptions={fetchSpotifyOptions}
              handleDelete={handleDelete}
              spotifyOptions={spotifyOptions}
              setSpotifyOptions={setSpotifyOptions}
              applySpotifyEnhancement={applySpotifyEnhancement}
            />
          ))}
      </React.Fragment>
    );
  };

  return (
    <div style={{ padding: "1rem" }}>
      <SongFilters
        search={search}
        setSearch={setSearch}
        status={status}
        sortKey={sortKey}
        sortDirection={sortDirection}
        onSort={handleSort}
        onStatusChange={onStatusChange}
        onToggleAllGroups={toggleAllGroups}
        collapsedGroups={collapsedGroups}
        songs={songs}
        selectedSongs={selectedSongs}
        setSelectedSongs={setSelectedSongs}
      />

      <div style={{ marginBottom: "1rem" }}>
        <label style={{ marginRight: "1rem" }}>
          <input
            type="radio"
            name="groupBy"
            value="artist"
            checked={groupBy === "artist"}
            onChange={(e) => setGroupBy(e.target.value)}
          />
          Group by Artist
        </label>
        <label>
          <input
            type="radio"
            name="groupBy"
            value="pack"
            checked={groupBy === "pack"}
            onChange={(e) => setGroupBy(e.target.value)}
          />
          Group by Pack
        </label>
      </div>

      <table style={{ width: "100%", borderCollapse: "collapse" }}>
        <thead>
          <tr>
            <th style={{ width: "40px", textAlign: "center" }}>
              <input
                type="checkbox"
                checked={
                  selectedSongs.length === songs.length && songs.length > 0
                }
                onChange={(e) => {
                  if (e.target.checked) {
                    setSelectedSongs(songs.map((s) => s.id));
                  } else {
                    setSelectedSongs([]);
                  }
                }}
                className="pretty-checkbox"
              />
            </th>
            <th>Title</th>
            <th>Artist</th>
            <th>Album</th>
            <th>Pack</th>
            <th>Year</th>
            <th>Status</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {Object.entries(groupedSongs).map(([key, value]) => {
            if (groupBy === "artist") {
              return renderArtistGroup(key, value);
            } else {
              return renderPackGroup(key, value);
            }
          })}
        </tbody>
      </table>

      <AlbumSeriesModal
        showModal={showAlbumSeriesModal}
        onClose={() => setShowAlbumSeriesModal(false)}
        formData={albumSeriesForm}
        setFormData={setAlbumSeriesForm}
        onSubmit={handleCreateAlbumSeries}
        selectedSongs={selectedSongs}
        songs={songs}
      />
    </div>
  );
}

export default SongPage;
